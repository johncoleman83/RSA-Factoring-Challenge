#!/usr/bin/python3
from sys import argv
from math import sqrt
from time import time
from itertools import count, islice
import multiprocessing


def is_prime(n):
    return n > 1 and all((n % i) for i in islice(count(2), int(sqrt(n) - 1)))


def factorize_prime(n):
    if is_prime(n):
        print("{:d}={:d}*{:d}".format(n, n, 1))

def factorize(start, n):
    sq = int(sqrt(n) + 2)
    for i in range(start, sq):
        if (n % i == 0):
            print("{:d}={:d}*{:d}".format(n, int(n / i), i))
            break;
        if (i == sq):
            print("{:d}={:d}*{:d}".format(n, n, 1))
            break


def factorize_reverse(end, n):
    for i in range(end, 0, -1):
        if n % i == 0:
            print("{:d}={:d}*{:d}".format(n, int(n / i), i))
            break;


def initialize_process(n):
    sq = (int(sqrt(n) + 1))
    first = multiprocessing.Process(target=factorize_reverse, args=(sq, n))
    second = multiprocessing.Process(target=factorize_reverse,
                                     args=(int(sq / 2), n))
    third = multiprocessing.Process(target=factorize, args=(2, n))
    fourth = multiprocessing.Process(target=factorize, args=(int(sq / 2), n))
    fifth = multiprocessing.Process(target=factorize_prime, args=(n, ))
    return [first, second, third, fourth, fifth]


def main():
    fd = open(argv[1], 'r')
    file_lines = fd.readlines()
    fd.close()
    num_lines = len(file_lines)
    file_lines = sorted(file_lines, key=lambda x: len(x))
    running = []
    for line in file_lines:
        running.append(initialize_process(int(line)))
    for sublist in running:
        for p in sublist:
            p.start()
    for sublist in running:
        for p in sublist:
            p.join()


"""start_t = time()
print("Time to run =", (end_t - start_t))
end_t = time()"""


if __name__ == "__main__":
    main()
