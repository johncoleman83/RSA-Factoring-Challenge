#!/usr/bin/python3
from sys import argv, maxsize
from time import time
from itertools import count, islice
import multiprocessing


def is_prime(n):
    return all((n % i) for i in islice(count(2), int(n**0.5 - 1)))


def get_primes(start, R, n):
    return list(i for i in islice(count(start), R) if is_prime(i))


def prime_factorization(start, R, n):
    primes_list = get_primes(start, R, n)
    if (len(primes_list) > 0):
        for i in primes_list:
            if (n % i == 0):
                print("{:d}={:d}*{:d}".format(n, int(n / i), i))


def initialize_process(n):
    SQR = int(n**0.5) - 1
    p = multiprocessing.Process(target=prime_factorization, args=(2, SQR, n))
    return p


def main():
    start_t = time()
    fd = open(argv[1], 'r')
    file_lines = fd.readlines()
    fd.close()
    num_lines = len(file_lines)
    file_lines = sorted(file_lines, key=lambda x: len(x))
    running = []
    for line in file_lines:
        running.append(initialize_process(int(line)))
    for p in running:
        p.start()
    for p in running:
        p.join()
    end_t = time()
    print("Time to run =", (end_t - start_t))


if __name__ == "__main__":
    main()
